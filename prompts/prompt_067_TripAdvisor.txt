Task: Given a table and a question, the goal is to write a Python program to answer the question using the provided dataset.

Steps:

1. Define necessary functions that can be reused for other problems in this type of task.
2. Ensure that functions are general and flexible enough to be reused in different questions or tables.
3. Define a main function called solution(table_data) that accepts the table data as input and returns the answer to the question.
4. Import pandas, load the dataset, analyze its structure, and run the solution function.
5. Ensure no hallucination of non-existent table headers and structure.
6. Avoid making assumptions about missing or empty column headers.
7. Make sure the code is modular and reusable for various queries on the table.

Dataset Format: The dataset will always be structured as follows:

TABLE:
| Field             | Value                      
|-------------------|--------------------------|
| ratings           | {'service': 5.0, 'cleanliness': 5.0, 'overall': 5.0, 'value': 4.0, 'location': 5.0, 'sleep_quality': 5.0, 'rooms': 4.0} |
| title             | “Very nice experience for a country boy going to town” |
| text              | Being from a small town in Tennessee, I was very unsure of what to expect from the large city hotel. I was very surprised by the down home feel my wife and I received from the staff at the hotel from check-in to check-out. We were met by the doorman who graciously took care of our car and helped us check into our room. The young man at the desk did a great job of advising us on which tours to take and a great Italian restaurant in the West Loop neighborhood. Since we don't travel to large cities often we really appreciated the friendly atmosphere of the staff.........they always made us feel welcome and answered our questions easily and friendly. I would recommend this hotel to anyone wanting a pleasant experience free from the hustle and bustle of big city life, well located and within walking distance of everything. Thanks to all for a wonderful weekend.................we plan on returning. |
| author            | {'username': 'Tucker124', 'num_reviews': 1, 'id': '39AA7B174D045F1E2BAE8A398D00BBC2', 'location': 'Martin, Tennessee', 'num_helpful_votes': 2} |
| date_stayed       | October 2010 |
| offering_id       | 111492 |
| num_helpful_votes | 2 |
| date              | 2010-10-25 00:00:00+00:00 |
| id                | 84800976 |
| via_mobile        | False |


Question: What is the average 'service' rating for all reviews in the dataset?

Solution Example Code:

import pandas as pd

def load_data(file_path):
    try:
        df = pd.read_parquet(file_path)
        return df
    except Exception as e:
        print(f"Error loading data from {file_path}: {e}")
        return None

def get_row_by_name(df, key):
    # Check if the column exists in the DataFrame and return its value in the first row
    if key in df.columns:
        return df[key]
    return None

# Solution Function
def solution(df):
    # Extract the 'ratings' column from all rows
    ratings_list = df['ratings'].apply(lambda x: ast.literal_eval(x) if isinstance(x, str) else {})

    # Extract the 'service' rating from each row's ratings dictionary
    service_ratings = ratings_list.apply(lambda x: x.get('service'))

    # Calculate the average 'service' rating across all rows
    avg_service_rating = service_ratings.mean()

    return avg_service_rating

# Example usage with a loaded dataset, always use this path
df = load_data("../data/datasets/competition/067_TripAdvisor/all.parquet")
# Just print the solution as shown below, do not print anything else
print(solution(df))

Answer: 4.079452684833851

Note: The load_data function should be flexible enough to handle various datasets. Similarly, get_row_by_name is a general helper function for retrieving a value from a specific column by name.

Types of Answers Expected:

Boolean: Valid answers include True/False, Y/N, Yes/No (all case insensitive).
Category: A value from a cell (or a substring of a cell) in the dataset.
Number: A numerical value from a cell in the dataset, which may represent a computed statistic (e.g., average, maximum, minimum).
List[category]: A list containing a fixed number of categories. The expected format is: "['cat', 'dog']". Pay attention to the wording of the question to determine if uniqueness is required or if repeated values are allowed.
List[number]: Similar to List[category], but with numbers as its elements.

Write a code for this question: 

[[QUESTION]]

